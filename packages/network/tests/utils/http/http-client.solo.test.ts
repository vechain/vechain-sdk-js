import { describe, expect, test } from '@jest/globals';
import { InvalidHTTPRequest, stringifyData } from '@vechain/sdk-errors';
import { fail } from 'assert';
import { HttpClient, type HttpParams, THOR_SOLO_URL } from '../../../src';
import { testAccount } from '../../fixture';
import { ZERO_ADDRESS, zeroAddressAccountDetails } from './fixture';

/**
 * HttpClient class tests.
 *
 * @group integration/network
 */
describe('Test HttpClient class on Solo node', () => {
    const soloNetwork = new HttpClient(THOR_SOLO_URL);
    /**
     * HTTP Request tests
     */
    test('Should perform an HTTP GET request and resolve with response data', async () => {
        const response = await soloNetwork.http(
            'GET',
            `/accounts/${ZERO_ADDRESS}`
        );

        expect(stringifyData(response)).toEqual(
            stringifyData(zeroAddressAccountDetails)
        );
    });

    /**
     * HTTP Request tests rejecting with an error (1)
     */
    test('Should reject with an error if the HTTP request fails (1)', async () => {
        // Assert that the HTTP request fails with an error
        try {
            await soloNetwork.http('GET', '/error-test-path');
            fail('should not get here');
        } catch (error) {
            expect(error).toBeInstanceOf(InvalidHTTPRequest);
            if (error instanceof InvalidHTTPRequest) {
                expect(error.message).toBe(
                    `Method 'HttpClient.http()' failed.` +
                        `\n-Reason: 'Invalid URL: http://localhost:8669/error-test-path'` +
                        `\n-Parameters: \n\t{"method":"GET","url":"http://localhost:8669/error-test-path","message":"Request failed"}` +
                        `\n-Internal error: ` +
                        `\n\tMethod 'HttpClient.http()' failed.` +
                        `\n-Reason: 'Invalid URL: http://localhost:8669/error-test-path'` +
                        `\n-Parameters: \n\t{"method":"GET","url":"http://localhost:8669/error-test-path","status":404,"message":"404 page not found\\n"}` +
                        `\n-Internal error: \n\tNo internal error given`
                );
            }
        }
    });
    /**
     * HTTP Request tests rejecting with an error (2)
     */
    test('Should reject with an error if the HTTP request fails (2)', async () => {
        // Assert that the HTTP request fails with an error
        try {
            // Targeting testnet
            await soloNetwork.http('POST', '/transactions', {
                body: {
                    raw: '0xf90b88278801274518b8bcffbb20f90b29f90b268080b90b2160806040523480156200001157600080fd5b5060405162000b0138038062000b0183398101604081905262000034916200021e565b6040518060400160405280600481526020016311dbdb1960e21b8152506040518060400160405280600381526020016211d31160ea1b81525081600390816200007e9190620002dd565b5060046200008d8282620002dd565b505050620000a23382620000a960201b60201c565b50620003d1565b6001600160a01b038216620000d95760405163ec442f0560e01b8152600060048201526024015b60405180910390fd5b620000e760008383620000eb565b5050565b6001600160a01b0383166200011a5780600260008282546200010e9190620003a9565b909155506200018e9050565b6001600160a01b038316600090815260208190526040902054818110156200016f5760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401620000d0565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b038216620001ac57600280548290039055620001cb565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200021191815260200190565b60405180910390a3505050565b6000602082840312156200023157600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200026357607f821691505b6020821081036200028457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002d857600081815260208120601f850160051c81016020861015620002b35750805b601f850160051c820191505b81811015620002d457828155600101620002bf565b5050505b505050565b81516001600160401b03811115620002f957620002f962000238565b62000311816200030a84546200024e565b846200028a565b602080601f831160018114620003495760008415620003305750858301515b600019600386901b1c1916600185901b178555620002d4565b600085815260208120601f198616915b828110156200037a5788860151825594840194600190910190840162000359565b5085821015620003995787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115620003cb57634e487b7160e01b600052601160045260246000fd5b92915050565b61072080620003e16000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce567146100fe57806370a082311461010d57806395d89b4114610136578063a9059cbb1461013e578063dd62ed3e1461015157600080fd5b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100d957806323b872dd146100eb575b600080fd5b6100a061018a565b6040516100ad919061056a565b60405180910390f35b6100c96100c43660046105d4565b61021c565b60405190151581526020016100ad565b6002545b6040519081526020016100ad565b6100c96100f93660046105fe565b610236565b604051601281526020016100ad565b6100dd61011b36600461063a565b6001600160a01b031660009081526020819052604090205490565b6100a061025a565b6100c961014c3660046105d4565b610269565b6100dd61015f36600461065c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101999061068f565b80601f01602080910402602001604051908101604052809291908181526020018280546101c59061068f565b80156102125780601f106101e757610100808354040283529160200191610212565b820191906000526020600020905b8154815290600101906020018083116101f557829003601f168201915b5050505050905090565b60003361022a818585610277565b60019150505b92915050565b600033610244858285610289565b61024f85858561030c565b506001949350505050565b6060600480546101999061068f565b60003361022a81858561030c565b610284838383600161036b565b505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461030657818110156102f757604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b6103068484848403600061036b565b50505050565b6001600160a01b03831661033657604051634b637e8f60e11b8152600060048201526024016102ee565b6001600160a01b0382166103605760405163ec442f0560e01b8152600060048201526024016102ee565b610284838383610440565b6001600160a01b0384166103955760405163e602df0560e01b8152600060048201526024016102ee565b6001600160a01b0383166103bf57604051634a1406b160e11b8152600060048201526024016102ee565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561030657826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161043291815260200190565b60405180910390a350505050565b6001600160a01b03831661046b57806002600082825461046091906106c9565b909155506104dd9050565b6001600160a01b038316600090815260208190526040902054818110156104be5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016102ee565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166104f957600280548290039055610518565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161055d91815260200190565b60405180910390a3505050565b600060208083528351808285015260005b818110156105975785810183015185820160400152820161057b565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146105cf57600080fd5b919050565b600080604083850312156105e757600080fd5b6105f0836105b8565b946020939093013593505050565b60008060006060848603121561061357600080fd5b61061c846105b8565b925061062a602085016105b8565b9150604084013590509250925092565b60006020828403121561064c57600080fd5b610655826105b8565b9392505050565b6000806040838503121561066f57600080fd5b610678836105b8565b9150610686602084016105b8565b90509250929050565b600181811c908216806106a357607f821691505b6020821081036106c357634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561023057634e487b7160e01b600052601160045260246000fdfea26469706673582212204fc4ffdfc8540dbc5f395134d2f380e64cb54ea2247bac41c14298f8e885db8464736f6c6343000814003300000000000000000000000000000000000000000000003635c9adc5dea0000080830aafd98086b5d1318cad3fc0b84157df15b58b4f2425d4f176d265429c7b672c609202445290d6fa9aefafd169b85fdb9b6aee59250b4c0186c0873e0d4b2d7bf04f0602e9e1c01286fdd476c31100'
                }
            });
            fail('should not get here');
        } catch (error) {
            expect(error).toBeInstanceOf(InvalidHTTPRequest);
            if (error instanceof InvalidHTTPRequest) {
                expect(error.message).toBe(
                    `Method 'HttpClient.http()' failed.` +
                        `\n-Reason: 'Invalid URL: http://localhost:8669/transactions'` +
                        `\n-Parameters: \n\t{"method":"POST","url":"http://localhost:8669/transactions","message":"Request failed"}` +
                        `\n-Internal error: ` +
                        `\n\tMethod 'HttpClient.http()' failed.` +
                        `\n-Reason: 'Invalid URL: http://localhost:8669/transactions'` +
                        `\n-Parameters: \n\t{"method":"POST","url":"http://localhost:8669/transactions","status":400,"message":"bad tx: chain tag mismatch\\n"}` +
                        `\n-Internal error: \n\tNo internal error given`
                );
            }
        }
    });

    /**
     * Request params validation
     */
    test('Should validate response headers', async () => {
        const customParams: HttpParams = {
            query: {},
            body: {},
            headers: {
                'X-Custom-Header': 'custom-value'
            },
            validateResponseHeader: function (
                headers: Record<string, string>
            ): void {
                expect(headers).toBeDefined();
            }
        };

        // Make an actual HTTP GET request and pass the validateResponseHeaders function
        const response = await soloNetwork.http(
            'GET',
            '/accounts/' + testAccount,
            customParams
        );

        // You can also check the response data if needed
        expect(response).toBeDefined();
    });
});
