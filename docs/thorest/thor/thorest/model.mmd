---
title: "@thor.model"
---
classDiagram
    namespace transactions_model {
        class TxMeta {
            Hex blockID
            number blockNumber
            number blockTimeStamp
            constructor(TxMetaJSON json)
            TxMetaJSON toJSON()
        }
    }
    class Clause {
        Address|null to
        bigint value
        Hex|null data
        string|null comment
        string|null abi
        constructor(Address|null to, bigint value, Hex|null, data, string|null comment, string|null abi)
        of(ClauseJSON: json)$
        ClauseJSON toJSON()
    }
    class Event {
        Address address
        Hex[] topics
        Hex data
        constructor(EventJSON event)
        EventJSON toJSON()
    }
    class Output {
        Address contractAddress
        Event[] events
        Transfer[] transfers
        contructor(OutputJSON json)
        OutputJSON toJSON()
    }
    class Receipt {
        number|null type
        bigint gasUsed
        Address gasPayer
        bigint paid
        bigint reward
        boolean reverted
        Output[] outputs
        constructor(ReceiptJSON json)
        ReceiptJSON toJSON()
    }
    class ReceiptMeta {
        Hex txID
        Address txOrigin
        constructor(ReceiptMetaJSON json)
        ReceiptMetaJSON toJSON()
    }
    class TransactionRequest {
        constructor(TransactionRequestParam param)
        Uint8Array encoded
        Uint8Array gasPayerSignature
        Blake2b256 hash
        boolean isDynamicFee
        boolean isIntendedToBeSponsored
        boolean isSigned
        Uint8Array originSignature
        Uint8Array signature
        TransactionRequest decode(Uint8Array encoded)$
        TransactionRequestJSON toJSON()
    }
    class TransactionRequestParams {
        <<interface>>
        Address beggar?
        Hex blockRef
        number chainTag
        Clause[] clauses
        Hex|null dependsOn
        number expiration
        bigint gas
        bigint gasPriceCoef?
        number nonce
        bigint maxFeePerGas?
        bigint maxPriorityFeePerGas?
    }
    class Transfer {
        Address sender
        Address recipient
        bigint ammount
        constructor(TransferJSON: json)
        TransferJSON`toJSON()
    }
    namespace thor_signer {
        class Signer {
            <<interface>>
            Address address
            TransactionRequest sign(TransactionRequest transactionRequest)
        }
    }
    Clause *-- TransactionRequestParams
    TransactionRequestParams <|.. TransactionRequest
    TxMeta <|-- ReceiptMeta
    TransactionRequest "Signer.sign(transactionRequest: TransactionRequest): TransactionRequest" <-- Signer
