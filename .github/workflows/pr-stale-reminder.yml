name: PR Reminder (last 7 days)

on:
  schedule:
    - cron: '15 8 * * 1-5' # 10:15 Europe/Rome during CEST (UTC+2)
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

jobs:
  check_slack_secret:
    name: Check Slack Bot Token
    runs-on: ubuntu-latest
    outputs:
      has_secret: ${{ steps.eval.outputs.has_secret }}
    steps:
      - name: Evaluate Slack bot token and channel id
        id: eval
        shell: bash
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
        run: |
          if [ -n "${SLACK_BOT_TOKEN}" ] && [ -n "${SLACK_CHANNEL_ID}" ]; then
            echo "has_secret=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_secret=false" >> "$GITHUB_OUTPUT"
          fi

  remind:
    name: Post reminder to Slack (Bot)
    runs-on: ubuntu-latest
    needs: [check_slack_secret]
    if: ${{ needs.check_slack_secret.outputs.has_secret == 'true' }}
    steps:
      - name: Build reminder message
        id: build
        shell: bash
        run: |
          set -euo pipefail
          REPO="${{ github.repository }}"
          SEVEN_DAYS_AGO=$(date -u -d '7 days ago' +%Y-%m-%dT%H:%M:%SZ)
          PRS=$(curl -sS -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${REPO}/pulls?state=open&per_page=100")
          COUNT=$(echo "$PRS" | jq --arg d "$SEVEN_DAYS_AGO" '[.[] | select(.created_at >= $d)] | length')
          if [ "$COUNT" -eq 0 ]; then
            echo "count=0" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          LINES=$(echo "$PRS" | jq -r --arg d "$SEVEN_DAYS_AGO" \
            '[.[] | select(.created_at >= $d) | "• #"+(.number|tostring)+" ("+(.base.ref)+") "+.title+" — @"+.user.login+" → "+.html_url] | .[]')
          MSG=$'Open PRs from last 7 days (not merged):\n'
          MSG+="$LINES"
          # Base64 to safely pass multi-line output
          echo "count=$COUNT" >> "$GITHUB_OUTPUT"
          printf '%s' "$(printf '%s' "$MSG" | base64 -w0)" > msg.b64
          echo "message_b64=$(cat msg.b64)" >> "$GITHUB_OUTPUT"

      - name: Notify Slack (skip if none)
        if: ${{ steps.build.outputs.count != '0' }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
        shell: bash
        run: |
          TEXT=$(echo '${{ steps.build.outputs.message_b64 }}' | base64 -d)
          PAYLOAD=$(jq -n --arg channel "$SLACK_CHANNEL_ID" --arg text "$TEXT" '{channel:$channel,text:$text}')
          curl -sS -X POST https://slack.com/api/chat.postMessage \
            -H "Authorization: Bearer ${SLACK_BOT_TOKEN}" \
            -H "Content-type: application/json; charset=utf-8" \
            --data "$PAYLOAD"


