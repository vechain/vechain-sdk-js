{"version":3,"sources":["../src/vechain-transaction-logger.ts","../src/index.ts"],"names":["VechainTransactionLogger","url","webhookUrl","ThorClient","address","Poll","bestBlock","filterOptions","newLogs","log","error","logs","response","logger"],"mappings":"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","file":"index.js","sourcesContent":["import {\n    ThorClient,\n    Poll,\n    type EventPoll,\n    type FilterTransferLogsOptions,\n    type TransferLogs\n} from '@vechain/sdk-network';\n\n/**\n * The `VeChainTransactionLogger` class provides methods to monitor the transactions of an account\n */\nclass VechainTransactionLogger {\n    private readonly thorClient: ThorClient;\n    private monitoringPoll?: EventPoll<TransferLogs[]>;\n    private latestTimestamp: number = 0;\n    private readonly webhookUrl?: string;\n\n    constructor(url: string, webhookUrl?: string) {\n        this.thorClient = ThorClient.fromUrl(url);\n        this.webhookUrl = webhookUrl;\n    }\n\n    /**\n     * Start monitoring the transactions of an account\n     * @param address The address to monitor\n     */\n    public startLogging(address: string): TransferLogs[] | void {\n        this.monitoringPoll = Poll.createEventPoll(\n            // Get details about the account every time a transaction is made\n            async () => {\n                try {\n                    // Get the latest block\n                    const bestBlock =\n                        await this.thorClient.blocks.getBestBlockCompressed();\n                    // Filter the transactions based on the address\n                    const filterOptions: FilterTransferLogsOptions = {\n                        criteriaSet: [\n                            { sender: address }, // Transactions sent by the address\n                            { recipient: address } // Transactions received by the address\n                        ],\n                        order: 'desc', // Order logs by descending timestamp\n                        range: {\n                            unit: 'block',\n                            from: bestBlock != null ? bestBlock.number : 0,\n                            to: bestBlock != null ? bestBlock.number + 100 : 100\n                        }\n                    };\n\n                    // Get the transfer logs\n                    const logs =\n                        await this.thorClient.logs.filterTransferLogs(\n                            filterOptions\n                        );\n\n                    // Filter out transactions that occurred before the latest timestamp\n                    const newLogs = logs.filter(\n                        (log) => log.meta.blockTimestamp > this.latestTimestamp\n                    );\n\n                    // Update the latest timestamp\n                    if (newLogs.length > 0) {\n                        this.latestTimestamp = newLogs[0].meta.blockTimestamp;\n\n                        // Notify webhook if URL is provided\n                        if (this.webhookUrl != null) {\n                            await this.notifyWebhook(newLogs);\n                        }\n                    }\n\n                    return newLogs;\n                } catch (error) {\n                    console.error('Error while fetching transfer logs:', error);\n                    throw error; // Propagate the error to stop the polling\n                }\n            },\n            1000\n        )\n            .onStart(() => {\n                console.log(`Start monitoring account ${address}`);\n            })\n            .onStop(() => {\n                console.log(`Stop monitoring account ${address}`);\n            })\n            .onData((logs) => {\n                logs.forEach((log) => {\n                    console.log('Transaction details:', log);\n                });\n            })\n            .onError((error) => {\n                console.log('Error:', error);\n            });\n\n        this.monitoringPoll.startListen();\n    }\n\n    /**\n     * Stop monitoring the transactions\n     */\n    public stopLogging(): void {\n        if (this.monitoringPoll != null) {\n            this.monitoringPoll.stopListen();\n        }\n    }\n\n    /**\n     * Send a notification to the webhook\n     * @param newLogs Logs to be sent to the webhook\n     */\n    private async notifyWebhook(newLogs: TransferLogs[]): Promise<void> {\n        try {\n            // Make an HTTP POST request to the webhook URL with the new transaction data\n            const response = await fetch(this.webhookUrl as string, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(newLogs)\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            console.log('Webhook notification sent successfully');\n        } catch (error) {\n            console.error('Error sending webhook notification:', error);\n        }\n    }\n}\n\nexport { VechainTransactionLogger };\n","import { VechainTransactionLogger } from './vechain-transaction-logger';\n\n// Create a new logger instance\nconst logger = new VechainTransactionLogger('https://testnet.vechain.org/');\n// Start logging transactions for the specified address\nlogger.startLogging('0xc3bE339D3D20abc1B731B320959A96A08D479583');\n\n// Stop logging after one minute\nsetTimeout(() => {\n    logger.stopLogging();\n}, 60000);\n"]}